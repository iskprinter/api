// import process from 'process';

// import DdpgAgent from "./DdpgAgent";
// import Environment from "./Environment";
// import Pendulum from "./test/Pendulum";

// describe('DdpgAgent', () => {
//   let env: Environment;
//   let agent: DdpgAgent;

//   beforeEach(() => {
//     env = new Pendulum();
//     agent = new DdpgAgent({
//       actionShape: env.getActionSpace().shape,
//       env,
//       maxMemorySize: 1024 ** 2,
//       observationShape: env.getObservationSpace().shape,
//     });
//   });

//   it('acts and learns', async () => {
//     const nGames = 1;
//     const scoreHistory = [];
//     const loadCheckpoint = false;

//     for (let game = 0; game < nGames; game += 1) {
//       let observation = env.reset();
//       let score = 0;
//       for (let step = 0; step < 200; step += 1) {
//         const action = agent.chooseAction(observation);
//         const {
//           observation: nextObservation,
//           reward,
//           done
//         } = env.step(action);
//         score += reward.bufferSync().get();
//         agent.remember(observation, action, reward, nextObservation, done);
//         if (!loadCheckpoint) {
//           agent.learn();
//           // await agent.saveModels();
//         }
//         observation = nextObservation;
//       }
//       scoreHistory.push(score);
//       const totalScore = scoreHistory
//         .reduce((sum, score) => sum + score, 0);

//       const memStats = process.memoryUsage();
//       console.log([
//         `episode:\t${game}`,
//         `score:\t${score}`,
//         `avg score:\t${totalScore / (game + 1)}`,
//         `mem (MB):\t${Math.floor(memStats.heapUsed / 1024 / 1024)}/${Math.floor(memStats.heapTotal / 1024 / 1024)}`,
//       ].join('\n'));
//     }

//     for (let i = 0; i < nGames; i += 1) {
//       console.log(`game = ${i + 1}, score = ${scoreHistory[i]}`);
//     }
//   });
// });
